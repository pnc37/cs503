#include <stdio.h>     // For printf()
#include <unistd.h>    // For lseek(), read(), write(), close()
#include <fcntl.h>     // For open() flags
#include <string.h>    // For memcmp()
#include <stdlib.h>    // For exit()
#include "db.h"        // Includes student_t, STUDENT_RECORD_SIZE, EMPTY_STUDENT_RECORD, DB_FILE, TMP_DB_FILE
#include "sdbsc.h"     // Includes error messages

int compress_db(int fd) {
    student_t student;
    
    // Open temporary database file
    int tmp_fd = open(TMP_DB_FILE, O_WRONLY | O_CREAT | O_TRUNC, 0666);
    if (tmp_fd == -1) {
        printf(M_ERR_DB_OPEN);
        return ERR_DB_FILE;
    }

    // Move to the beginning of the database file
    if (lseek(fd, 0, SEEK_SET) == -1) {
        printf(M_ERR_DB_READ);
        close(tmp_fd);
        return ERR_DB_FILE;
    }

    // Read records and copy valid ones to the temporary file
    while (read(fd, &student, sizeof(student_t)) == sizeof(student_t)) {
        if (memcmp(&student, &EMPTY_STUDENT_RECORD, sizeof(student_t)) != 0) {
            if (write(tmp_fd, &student, sizeof(student_t)) != sizeof(student_t)) {
                printf(M_ERR_DB_WRITE);
                close(tmp_fd);
                return ERR_DB_FILE;
            }
        }
    }

    // Handle read error
    if (read(fd, &student, sizeof(student_t)) == -1) {
        printf(M_ERR_DB_READ);
        close(tmp_fd);
        return ERR_DB_FILE;
    }

    // Close both database files
    close(fd);
    close(tmp_fd);

    // Replace the original database with the compressed one
    if (rename(TMP_DB_FILE, DB_FILE) == -1) {
        printf(M_ERR_DB_CREATE);
        return ERR_DB_FILE;
    }

    // Reopen the new compressed database
    int new_fd = open(DB_FILE, O_RDWR);
    if (new_fd == -1) {
        printf(M_ERR_DB_OPEN);
        return ERR_DB_FILE;
    }

    // Success
    printf(M_DB_COMPRESSED_OK);
    return new_fd;
}
